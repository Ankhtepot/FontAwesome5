<#@ template language="C#" debug="true" hostSpecific="true"  #>
<#@ output extension="log" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="FontAwesome5.Generator" #>
<#
	Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile));
	var folderProject = Directory.GetCurrentDirectory();
	var folderRepo = new DirectoryInfo(folderProject).Parent.FullName;
	var configFile = Path.Combine(folderRepo, @"Font-Awesome\advanced-options\metadata\icons.json");

	var fa = new FontAwesomeManager(configFile);

	WriteLine("//------------------------------------------------------------------------------");
	WriteLine("// <auto-generated>");
	WriteLine("//     This code was generated by a tool");
	WriteLine("//");
	WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
	WriteLine("//     the code is regenerated.");
	WriteLine("// </auto-generated>");
	WriteLine("//------------------------------------------------------------------------------");

	WriteLine("using System;");
	WriteLine("using System.ComponentModel;");
	WriteLine("namespace FontAwesome5.WPF");
	WriteLine("{");
	PushIndent("\t");

	WriteLine("/// <summary>");
	WriteLine("/// FontAwesome by Dave Gandy (@davegandy)");
	WriteLine("///	The iconic SVG, font, and CSS toolkit");
	WriteLine("///	License https://fontawesome.com/license (C#: MIT License)");
	WriteLine("/// </summary>");
	WriteLine("public enum EFontAwesomeStyle");
	WriteLine("{");
	PushIndent("\t");
	WriteSummary("This Style is used as an undefined state.");
	WriteLine("None,");
	WriteLine("");
	foreach (EStyles style in Enum.GetValues(typeof(EStyles)))
	{
		WriteSummary("FontAwesome5 {0} Style", style);
		WriteLine("{0},", style);
		WriteLine("");
	}
	PopIndent();
	WriteLine("}");

	WriteLine("");
	WriteLine("///<summary>FontAwesome5 Icons</summary>");
	WriteLine("public enum EFontAwesomeIcon");
	WriteLine("{");
	PushIndent("\t");
	WriteSummary("Set this value to show no icon.");
	WriteLine("None = 0x0,");
	WriteLine("");

	foreach (EStyles style in Enum.GetValues(typeof(EStyles)))
	{
		foreach (var kvp in fa.Icons.Where(i => i.Value.styles.Contains(style.ToString().ToLower())))
		{
			WriteSummary(kvp.Value.label);
			WriteLine("///<see href=\"http://fontawesome.com/icons/{0}?style={1}\" />", kvp.Key, style.ToString().ToLower());
			WriteLine("[FontAwesomeInformation(\"{0}\", EFontAwesomeStyle.{1}, 0x{2})]", kvp.Value.label, style.ToString(), kvp.Value.unicode);

			if (kvp.Value.svg.TryGetValue(style.ToString().ToLower(), out var svgInfo))
			{
				WriteLine("[FontAwesomeSvgInformation(\"{0}\", {1}, {2})]", svgInfo.path, svgInfo.width, svgInfo.height);
			}
			WriteLine("{0}_{1},", style, fa.Convert(kvp.Key));
			WriteLine("");
		}
	}

	PopIndent();
	WriteLine("}");

	WriteLine("");
	WriteSummary("FontAwesome Information Attribute");
	WriteLine("public class FontAwesomeInformationAttribute : Attribute");
	WriteLine("{");
	PushIndent("\t");
	WriteSummary("FontAwesome Style");
	WriteLine("public EFontAwesomeStyle Style { get; set; }");
	WriteSummary("FontAwesome Label");
	WriteLine("public string Label { get; set; }");
	WriteSummary("FontAwesome Unicode");
	WriteLine("public int Unicode { get; set; }");
	WriteLine("");
	WriteLine("public FontAwesomeInformationAttribute(string label, EFontAwesomeStyle style, int unicode)");
	WriteLine("{");
	WriteLine("    Label = label;");
	WriteLine("    Style = style;");
	WriteLine("    Unicode = unicode;");
	WriteLine("}");
	PopIndent();
	WriteLine("}");


	WriteLine("");
	WriteSummary("FontAwesome SVG Information Attribute");
	WriteLine("public class FontAwesomeSvgInformationAttribute : Attribute");
	WriteLine("{");
	PushIndent("\t");
	WriteSummary("FontAwesome SVG Path");
	WriteLine("public string Path { get; set; }");
	WriteSummary("FontAwesome SVG Width");
	WriteLine("public int Width { get; set; }");
	WriteSummary("FontAwesome SVG Height");
	WriteLine("public int Height { get; set; }");
	WriteLine("");
	WriteLine("public FontAwesomeSvgInformationAttribute(string path, int width, int height)");
	WriteLine("{");
	WriteLine("    Path = path;");
	WriteLine("    Width = width;");
	WriteLine("    Height = height;");
	WriteLine("}");
	PopIndent();
	WriteLine("}");

	PopIndent();
	WriteLine("}");

	var outputFile = Path.Combine(folderRepo, @"FontAwesome5.WPF\EFontAwesomeIcon.cs");	
	File.WriteAllText(outputFile, this.GenerationEnvironment.ToString()); 
	this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
#>

<#+
	public void WriteSummary(string text)
	{
		WriteLine("/// <summary>");
		WriteLine("/// {0}" ,text);
		WriteLine("/// </summary>");
	} 

	public void WriteSummary(string format, params object[] parameter)
	{
		WriteLine("/// <summary>");
		WriteLine("/// " + format, parameter);
		WriteLine("/// </summary>");
	}
#>